import { notificationService } from './notification-service';

export class PushNotificationService {
  private static instance: PushNotificationService;
  private registration: ServiceWorkerRegistration | null = null;

  static getInstance(): PushNotificationService {
    if (!PushNotificationService.instance) {
      PushNotificationService.instance = new PushNotificationService();
    }
    return PushNotificationService.instance;
  }

  // Check if push notifications are supported
  isSupported(): boolean {
    return 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window;
  }

  // Get current permission status
  getPermissionStatus(): NotificationPermission {
    if (!this.isSupported()) return 'denied';
    return Notification.permission;
  }

  // Request notification permission
  async requestPermission(): Promise<NotificationPermission> {
    if (!this.isSupported()) {
      throw new Error('Push notifications are not supported in this browser');
    }

    if (Notification.permission === 'granted') {
      return 'granted';
    }

    const permission = await Notification.requestPermission();
    return permission;
  }

  // Register service worker and get push subscription
  async registerServiceWorker(): Promise<void> {
    if (!this.isSupported()) {
      throw new Error('Service workers are not supported');
    }

    try {
      this.registration = await navigator.serviceWorker.register('/sw.js');
      console.log('Service Worker registered successfully');
    } catch (error) {
      console.error('Service Worker registration failed:', error);
      throw error;
    }
  }

  // Subscribe to push notifications
  async subscribeToPush(userId: string): Promise<PushSubscription | null> {
    if (!this.registration) {
      await this.registerServiceWorker();
    }

    if (!this.registration) {
      throw new Error('Service Worker not registered');
    }

    try {
      // Check if already subscribed
      let subscription = await this.registration.pushManager.getSubscription();
      
      if (!subscription) {
        // Create new subscription
        subscription = await this.registration.pushManager.subscribe({
          userVisibleOnly: true,
          applicationServerKey: this.urlBase64ToUint8Array(
            process.env.NEXT_PUBLIC_VAPID_PUBLIC_KEY || ''
          )
        });
      }

      if (subscription) {
        // Save subscription to database
        await this.saveSubscription(userId, subscription);
      }

      return subscription;
    } catch (error) {
      console.error('Failed to subscribe to push notifications:', error);
      throw error;
    }
  }

  // Unsubscribe from push notifications
  async unsubscribeFromPush(userId: string): Promise<void> {
    if (!this.registration) return;

    try {
      const subscription = await this.registration.pushManager.getSubscription();
      if (subscription) {
        await subscription.unsubscribe();
        await this.removeSubscription(userId, subscription);
      }
    } catch (error) {
      console.error('Failed to unsubscribe from push notifications:', error);
      throw error;
    }
  }

  // Save subscription to database
  private async saveSubscription(userId: string, subscription: PushSubscription): Promise<void> {
    const subscriptionData = subscription.toJSON();
    
    await notificationService.registerPushToken({
      id: '', // Will be generated by database
      user_id: userId,
      token: JSON.stringify(subscriptionData),
      platform: 'web',
      device_id: this.generateDeviceId(),
      is_active: true,
      created_at: new Date().toISOString(),
      updated_at: new Date().toISOString()
    });
  }

  // Remove subscription from database
  private async removeSubscription(userId: string, subscription: PushSubscription): Promise<void> {
    const subscriptionData = subscription.toJSON();
    await notificationService.removePushToken(userId, JSON.stringify(subscriptionData));
  }

  // Generate a unique device ID
  private generateDeviceId(): string {
    return 'web_' + Math.random().toString(36).substring(2) + Date.now().toString(36);
  }

  // Convert VAPID key to Uint8Array
  private urlBase64ToUint8Array(base64String: string): Uint8Array {
    const padding = '='.repeat((4 - base64String.length % 4) % 4);
    const base64 = (base64String + padding)
      .replace(/-/g, '+')
      .replace(/_/g, '/');

    const rawData = window.atob(base64);
    const outputArray = new Uint8Array(rawData.length);

    for (let i = 0; i < rawData.length; ++i) {
      outputArray[i] = rawData.charCodeAt(i);
    }
    return outputArray;
  }

  // Show local notification (fallback)
  showLocalNotification(title: string, options?: NotificationOptions): void {
    if (this.getPermissionStatus() === 'granted') {
      new Notification(title, {
        icon: '/icon-192x192.png',
        badge: '/icon-72x72.png',
        ...options
      });
    }
  }

  // Test push notification
  async testNotification(): Promise<void> {
    if (this.getPermissionStatus() === 'granted') {
      this.showLocalNotification('Test Notification', {
        body: 'This is a test notification from Social Media App',
        tag: 'test',
        requireInteraction: false
      });
    } else {
      throw new Error('Notification permission not granted');
    }
  }
}

export const pushNotificationService = PushNotificationService.getInstance();